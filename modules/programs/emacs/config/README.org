#+TITLE: Doom Emacs config
#+PROPERTY: header-args :tangle config.el
#+STARTUP: fold
#+auto_tangle: t

* Table of Contents :TOC:
- [[#introduction][Introduction]]
  - [[#whats-this-document-][What's this document ?]]
  - [[#who-am-i-][Who am I ?]]
  - [[#why-doom-emacs-][Why Doom Emacs ?]]
- [[#general-settings][General settings]]
  - [[#theme][Theme]]
  - [[#fonts][Fonts]]
  - [[#keybindings][Keybindings]]
  - [[#filetypes][Filetypes]]
  - [[#other-settings][Other settings]]
- [[#avy][Avy]]
- [[#company][Company]]
- [[#dired][Dired]]
  - [[#dired-open][Dired-open]]
  - [[#ranger][Ranger]]
- [[#org-mode][Org mode]]
  - [[#auto-tangle][Auto tangle]]
- [[#rainbow-mode][Rainbow Mode]]
- [[#treemacs][Treemacs]]
- [[#vterm][Vterm]]
- [[#other-packages][Other packages]]

* Introduction
** What's this document ?
This readme file contains most of my Doom Emacs config, all in one document. To do this, I send all the source code from this file into my config.el and my packages.el through the magic that is org mode ! This allows me to better document my code, which should help anyone coming along understand a little easier what's going on.

** Who am I ?
I'm Peter BAUDRY, a programmer that is passionate about learning new things and improving my skills. Since leaving the darkside that is Windows many years ago and joining the (GNU) Linux light, I've been able to get to know not only the operating system but also a bunch of tools that I never knew of before.
I started programming using proper IDE's, like Eclipse and Visual Studio, then once I realised how heavy they were, I moved over to VS Code. It worked well for me for awhile... But then came... Vim, or more specifically, Neovim. Once I learned Vim, how light and configurable it was, I couldn't go back. Not only was it give me hours of joyful configuration to do, but I also found my workflow had improved since using it.
I ended up configuring Neovim to my liking, but the more I used it the more I noticed its problems. It didn't handle big projects very well, which could lead to slowdowns or even crashes. This was not acceptable if it were to be my only editor. Moreover, if I wanted to use it, say, on a remote server, I would have to copy my config over to it, which takes time and isn't ideal to maintain.
After such a journey, here I am, ready for a change once more. Ready to use Doom Emacs, to replace it all.

** Why Doom Emacs ?
Emacs seems to solve the various problems that I had with Neovim, working smoothly, no slowdowns, can connect itself to remote servers without copying configs... It seems to do no wrong ! I initially picked Doom Emacs because its stock configuration is already so close to what I wanted, evil mode out of the box with sane defaults. It also has a bunch of documentation made not only by the creators, but also youtubers (Hey DT!) that helped me grasp this tools a lot quicker than if I was all by my lonesome.
* General settings
** Theme
Doom Emacs' default colourscheme is perfect for me, who has always loved Atom's OneDark. The only change that I like is having a transparent background.

#+begin_src emacs-lisp
(setq doom-theme 'doom-one)

(add-to-list 'default-frame-alist '(alpha . 90))
#+end_src

** Fonts
Monospace + ligatures + patched = happiness.

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "JetBrainsMono Nerd Font" :size 14)
      doom-big-font (font-spec :family "JetBrainsMono Nerd Font" :size 24)
      doom-unicode-font (font-spec :family "JetBrainsMono Nerd Font")
      doom-variable-pitch-font (font-spec :family "JetBrainsMono Nerd Font" :size 14))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+end_src

** Keybindings
Some general keybindings that help while using the editor.

- Easy save
#+begin_src emacs-lisp
(map! :n  "C-s" #'save-buffer
      :iv "C-s" (cmd! (save-buffer)
                      (evil-force-normal-state)))
#+end_src

- Easy copy/paste
#+begin_src emacs-lisp
(map! :i "C-S-v" #'evil-paste-after
      :v "C-S-c" #'evil-yank)
#+end_src

- Use Alt + j/k to move lines up and down
#+begin_src emacs-lisp
(map! :after evil-org
      :map evil-org-mode-map
      :niv "M-j" nil
      :niv "M-k" nil)
(map! :niv "M-j" #'drag-stuff-down
      :niv "M-k" #'drag-stuff-up)
#+end_src

** Filetypes
Here I add modes to activate based on filetype.

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.yuck\\'" . lisp-mode))
#+end_src

** Other settings
A couple of extra settings that help me use the text editor.

#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
(setq evil-escape-unordered-key-sequence t
      evil-split-window-below t
      evil-vsplit-window-right t)

(global-auto-revert-mode 1)
(setq global-auto-revert-non-file-buffers t)

(setq user-full-name "Peter Baudry")
#+end_src

* Avy
Jump to visible text based on input.

#+begin_src emacs-lisp
(setq avy-all-windows t
      avy-single-candidate-jump nil)

(map! :after evil-snipe
      :map evil-snipe-mode-map
      :n "s" nil
      :n "S" nil)

(map! :n "s" #'evil-avy-goto-char-timer
      :n "S" #'evil-jump-backward)
#+end_src

* Company
Code completion, kind of important for a code editor.

#+begin_src emacs-lisp
(after! sh-script
  (set-company-backend! 'sh-mode
    '(company-shell :with company-yasnippet)))
#+end_src

* Dired
Dired is an awesome file manager that has replaced Ranger as my goto.

#+begin_src emacs-lisp
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)

(setq delete-by-moving-to-trash t
      trash-directory "~/.local/share/Trash/files/")

(defun empty-trash ()
  (interactive)
  (shell-command "rm -rf $HOME/.local/share/Trash/files/*"))
#+end_src

I needed a few extra packages to make Dired to my liking.

** Dired-open
This allows Dired to open files in external programs. Without this, it couldn't be as useful as a dedicated file manager.

#+begin_src emacs-lisp :tangle packages.el
(package! dired-open)
#+end_src

#+begin_src emacs-lisp
(setq dired-open-extensions '(("gif" . "feh")
                              ("jpg" . "feh")
                              ("png" . "feh")
                              ("docx" . "onlyoffice")
                              ("pdf" . "brave")
                              ("mkv" . "mpv")
                              ("mp4" . "mpv")))
#+end_src

** Ranger
Thanks to this package, dired gets a Ranger-like interface that includes file previews. This makes navigating the file system much quicker.

#+begin_src emacs-lisp
(setq ranger-cleanup-eagerly t
      ranger-show-hidden 'hidden
      ranger-hide-cursor t
      ranger-preview-file nil)

(map! :after dired
      :map (dired-mode-map ranger-mode-map)
      :g "a" #'dired-create-empty-file
      :g "A" #'dired-create-directory
      :g "l" #'dired-open-file)
#+end_src

* Org mode
Org mode is what has allowed me to write up this config in the first place.

#+begin_src emacs-lisp
(map! :leader
      :desc "Org babel tangle" "m B" #'org-babel-tangle)

(after! org
  (setq org-directory "~/.org"
        org-agenda-files '("~/.org/agenda.org")
        org-default-notes-file (expand-file-name "notes.org" org-directory)
        org-ellipsis " ▼ "
        org-superstar-headline-bullets-list '("◉" "●" "○" "◆" "●" "○" "◆")
        org-superstar-item-bullet-alist '((?+ . ?➤) (?- . ?✦))
        org-log-done 'time
        org-hide-emphasis-markers t))
#+end_src

#+begin_src emacs-lisp
(custom-set-faces
  '(org-level-1 ((t (:inherit outline-1 :height 1.4))))
  '(org-level-2 ((t (:inherit outline-2 :height 1.3))))
  '(org-level-3 ((t (:inherit outline-3 :height 1.2))))
  '(org-level-4 ((t (:inherit outline-4 :height 1.1))))
  '(org-level-5 ((t (:inherit outline-5 :height 1.0))))
)
#+end_src

** Auto tangle
Manually tangling takes time and energy, so how about not doing that ?

#+begin_src emacs-lisp :tangle packages.el
(package! org-auto-tangle)
#+end_src

#+begin_src emacs-lisp
(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode))
#+end_src

* Rainbow Mode
Hex colors are cool, actual colors are cooler.

#+begin_src emacs-lisp :tangle packages.el
(package! rainbow-mode)
#+end_src

I wanted rainbow mode to be enabled everywhere, but that caused the dashboard to have some graphical glitches. To avoid this I avoid it while defining a global minor mode.

#+begin_src emacs-lisp
(define-globalized-minor-mode global-rainbow-mode rainbow-mode
  (lambda () (unless (eq major-mode '+doom-dashboard-mode) (rainbow-mode 1))))

(global-rainbow-mode 1)
#+end_src

* Treemacs
A project explorer that is useful for quick file operations that don't merit a full Dired buffer.

#+begin_src emacs-lisp
(setq doom-themes-treemacs-theme "doom-colors")

(with-eval-after-load 'doom-themes
  (doom-themes-treemacs-config))

(after! treemacs
  (setq treemacs-default-visit-action 'treemacs-visit-node-close-treemacs
        treemacs-collapse-dirs 5
        treemacs-expand-after-init nil
        treemacs-expand-added-projects nil
        treemacs-show-cursor t
        treemacs-git-mode 'deferred))

(add-hook! 'projectile-after-switch-project-hook #'treemacs-display-current-project-exclusively #'treemacs)

(map! :leader
      :desc "Open Treemacs" "e" #'treemacs)

(map! :after treemacs
      :map treemacs-mode-map
      :g "a" #'treemacs-create-file
      :g "A" #'treemacs-create-dir)
#+end_src

* Vterm
A clean integrated terminal for emacs. I don't need that much tinkering, just a few keybindings.

#+begin_src emacs-lisp
(setq shell-file-name "/usr/bin/fish")

(map! :niv "C-²" #'+vterm/toggle)

(map! :map vterm-mode-map
      :i "C-S-v" #'vterm-yank)
#+end_src

* Other packages
#+begin_src emacs-lisp :tangle packages.el
(package! gitignore-templates)
#+end_src

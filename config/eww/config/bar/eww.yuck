(defvar bar-height 36)
(defvar bar-spacing 6)

(defwidget bar-seperator []
  (box :class "seperator"))

;; Workspaces Widget ;;
(defwidget bar-workspaces [monitor]
  (box :class "bar-workspaces"
       :orientation "h"
       :halign "center"
       :valign "start"
       :space-evenly false
       (for workspace in workspaces-data
            (hover-button :class {workspace.monitor == monitor ? "primary" : ""}
                          :onclick "common/scripts/open workspace ${workspace.id}"
                          (icon :class {workspace.monitor != monitor && arraylength(workspace.windows) > 0 ? "primary" : (workspace.monitor == monitor ? "background" : "")}
                                {workspace.name})))))

;; Windows Widget ;;
(defwidget bar-windows [monitor]
  (box :class "bar-windows"
       :orientation "h"
       :hexpand true
       (for window in {jq(workspaces-data, ".[] | select(.monitor == ${monitor}) | .windows")}
         (hover-button :class {window.focused == true ? "focused" : ""}
                       :onclick "common/scripts/open window ${window.address}"
                       (label :text {window.title})))))

;; Media Widget ;;
(defwidget bar-media []
  (revealer :reveal {media-data.status == "Playing" || media-data.status == "Paused"}
            :transition "slideright"
            :duration {transition-duration}
            (box :class "bar-media"
                 :orientation "h"
                 :space-evenly false
                 :spacing {bar-spacing}
                  (box :orientation "v"
                       :space-evenly false
                       (box :orientation "h"
                            :space-evenly false
                            (hover-button :onclick "playerctl previous"
                                          (icon ""))
                            (hover-button :onclick "playerctl play-pause"
                                          (icon {media-data.status == "Playing" ? "" : ""}))
                            (hover-button :onclick "playerctl next"
                                          (icon ""))
                            (label :class "label"
                                   :limit-width 40
                                   :text {media-data.title})
                            (label :class "time"
                                   :xalign 1
                                   :yalign 1
                                   :text {media-data.time}))
                      (scale :class {media-data.status != "Playing" ? "paused" : ""}
                              :orientation "h"
                              :min 0
                              :max {media-data.duration}
                              :value {media-data.position}))
                  (bar-seperator))))


;; Torrent Widget ;;
(defwidget bar-torrents [monitor]
  (revealer :reveal {arraylength(torrents-data) > 0}
            :transition "slideleft"
            :duration {transition-duration}
            (box :class "bar-torrents"
                 :orientation "h"
                 :space-evenly false
                 (bar-seperator)
                 (hover-button :onclick "common/scripts/open torrents ${monitor}"
                               :onrightclick "$HOME/.config/transmission-daemon/scripts/clear-torrents.sh"
                               (box :orientation "v"
                                    :space-evenly false
                                    (box :orientation "h"
                                         :space-evenly false
                                         :spacing {bar-spacing * 2}
                                         (icon :class "success"
                                               :label {jq(torrents-data, 'map(select(.eta != "Done")) | length')}
                                               "")
                                         (icon :class "warning"
                                               :label {jq(torrents-data, 'map(select(.eta == "Done")) | length')}
                                               ""))
                                (progress :class {jq(torrents-data, 'all(.eta == "Done")') ? "full" : (jq(torrents-data, 'all(.status == "Stopped")') ? "paused" : "")} 
                                       :orientation "h"
                                       :value {jq(torrents-data, 'map(.progress) | add / length')}))))))

;; Updates Widget ;;
(defwidget bar-updates []
  (revealer :reveal {updates-count > 0}
            :transition "slideleft"
            :duration {transition-duration}
            (box :orientation 'h'
                 :space-evenly false
                 (bar-seperator)
                 (hover-button :onclick "common/scripts/open updates"
                               :tooltip {updates-list}
                               (icon :class "success"
                                     :label "${updates-count} ${updates-count == 1 ? 'update' : 'updates'}"
                                     "")))))

;; Bluetooth Widget ;;
(defwidget bar-bluetooth []
  (hover-button :onclick "common/scripts/open bluetooth"
                :onrightclick "common/scripts/toggle bluetooth"
                (icon :class "variable ${bluetooth-data.enabled ? 'primary' : 'disabled'}"
                      :label "${bluetooth-data.connection}"
                      {bluetooth-data.icon})))

;; Network Widget ;;
(defwidget bar-network []
  (hover-button :onclick "common/scripts/open network"
                :onrightclick "common/scripts/toggle network"
                (icon :class "variable ${network-data.status == 'full' ? 'primary' : (network-data.status == 'limited' ? 'warning' : 'disabled')}"
                      :label "${network-data.connection}"
                      :tooltip " ${round(EWW_NET[network-data.device].NET_DOWN / (1024*2), 0)} Kb/s |  ${round(EWW_NET[network-data.device].NET_UP / (1024*2), 0)} Kb/s"
                      {network-data.icon})))

;; Volume Widget ;;
(defvar bar-volume-reveal -1)
(defwidget bar-volume []
  (hover-button :onclick "common/scripts/open volume"
                :onrightclick "common/scripts/toggle volume"
                (icon :class "variable ${volume-data.muted ? 'disabled' : 'primary'}"
                      :label "${volume-data.percent}%"
                      {volume-data.icon})))

;; Battery Widget ;;
(defwidget bar-battery []
  (hover-button :onclick ""
                (icon :class "variable ${battery-data.percent > 40 ? 'primary' : (battery-data.percent > 20 ? 'warning' : 'danger')}"
                      :label "${battery-data.percent}%"
                      {battery-data.icon})))

;; Date Widget ;;
(defwidget bar-time []
  (hover-button :class "bar-time"
                :tooltip date
                (label :class "label"
                       :text {time})))

;; Bar Widgets ;;
(defwidget bar [monitor]
  (box :class "bar"
       :orientation "h"
       :valign "center"
       :space-evenly false
       (box :orientation "h"
            :space-evenly false
            :spacing {bar-spacing}
            (bar-workspaces :monitor monitor)
            (bar-seperator)
            (bar-media))
       (box :hexpand true)
       (bar-torrents :monitor monitor)
       (bar-updates)
       (bar-seperator)
       (bar-bluetooth)
       (bar-seperator)
       (bar-network)
       (bar-seperator)
       (bar-volume)
       (bar-seperator)
       (bar-battery)
       (bar-seperator)
       (bar-time)))

(defwindow bar-0
  :geometry (geometry :x "0"
                      :y "6"
                      :height "36"
                      :width "100%")
  :stacking "fg"
  :monitor 0
  :hexpand "false"
  :vexpand "false"
  (bar :monitor 0))

(defwindow bar-1
  :geometry (geometry :x "0"
                      :y "6"
                      :height "36"
                      :width "100%")
  :stacking "fg"
  :monitor 1
  :hexpand "false"
  :vexpand "false"
  (bar :monitor 1))

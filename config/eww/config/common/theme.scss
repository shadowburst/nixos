@use "sass:list";
@use "sass:map";

@import "./colors.scss";
@import "./fonts.scss";

@mixin transition($type: null) {
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 200ms;

  @if not $type {
    transition-property: color, background-color, border-color, outline-color,
      text-decoration-color, fill, stroke, opacity, box-shadow, transform,
      filter, backdrop-filter;
  }
  @if $type == "all" {
    transition-property: all;
  }
  @if $type == "colors" {
    transition-property: color, background-color, border-color, outline-color,
      text-decoration-color, fill, stroke;
  }
  @if $type == "none" {
    transition-property: none;
  }
  @if $type == "opacity" {
    transition-property: opacity;
  }
}

@mixin spacing($attribute, $size, $direction: null) {
  $size: 0.25rem * $size;

  @if not $direction {
    #{$attribute}: $size;
  }
  @if $direction == "l" or $direction == "x" {
    #{$attribute}-left: $size;
  }
  @if $direction == "r" or $direction == "x" {
    #{$attribute}-right: $size;
  }
  @if $direction == "t" or $direction == "y" {
    #{$attribute}-top: $size;
  }
  @if $direction == "b" or $direction == "y" {
    #{$attribute}-bottom: $size;
  }
}
@mixin m($size: 3, $direction: null) {
  @include spacing(margin, $size, $direction);
}
@mixin p($size: 3, $direction: null) {
  @include spacing(padding, $size, $direction);
}
@mixin rounded($breakpoint: md, $direction: null) {
  $breakpoints: (
    0: 0,
    sm: 8px,
    md: 11px,
    lg: 20px,
    full: 100px,
  );
  $size: map.get($breakpoints, $breakpoint);

  @if not $direction {
    border-radius: $size;
  }
  @if $direction == "l" {
    border-radius: $size 0 0 $size;
  }
  @if $direction == "r" {
    border-radius: 0 $size $size 0;
  }
  @if $direction == "t" {
    border-radius: $size $size 0 0;
  }
  @if $direction == "b" {
    border-radius: 0 0 $size $size;
  }
}
@mixin border($color: $background, $size: 2, $direction: null, $style: solid) {
  $size: #{$size}px;

  border-color: $color;
  border-style: $style;

  @if not $direction {
    border-width: $size;
  }
  @if $direction == "l" or $direction == "x" {
    border-left-width: $size;
  }
  @if $direction == "r" or $direction == "x" {
    border-right-width: $size;
  }
  @if $direction == "t" or $direction == "y" {
    border-top-width: $size;
  }
  @if $direction == "b" or $direction == "y" {
    border-bottom-width: $size;
  }
}
@mixin bg($color: $background) {
  background-color: $color;
}
@mixin text($color: $foreground) {
  color: $color;
}
@mixin font($font: $normal-font, $size: 1rem, $weight: 500) {
  font-family: $font;
  font-size: $size;
  font-weight: $weight;
}

* {
  all: unset;
}

tooltip {
  @include rounded(sm);
  @include bg;
  @include text;
  @include font($nerd-font);

  & label {
    @include m(1);
  }
}

// Make progressbars size to content
progressbar trough {
  min-width: 1px;
}

.label {
  @include text;
  @include font;
}

@mixin button() {
  $dark-backgrounds: (transparent, $background, $card);

  @include transition(colors);

  & > * {
    @include p(3, x);
  }

  &:hover {
    @include bg(rgba(255, 255, 255, 0.03));
  }

  @each $colorKey, $color in $colors {
    &.#{$colorKey} {
      @include bg($color);

      &:hover {
        @if list.index($dark-backgrounds, $color) {
          @include bg(rgba(255, 255, 255, 0.03));
        } @else {
          @include bg(shade($color, 0.9));
        }
      }
    }
  }
}

@mixin icon($size: 2rem) {
  @include m(0);
  @include bg(transparent);
  @include text($foreground);
  @include font($nerd-font, $size);
}

.icon {
  @include icon;

  & .label {
    @include m(2, "l");
  }

  &.variable {
    font-size: calc(2rem + 8px);
    margin: -8px 0;
  }

  @each $colorKey, $color in $colors {
    &.#{$colorKey} {
      @include text($color);
    }
  }
}

.button {
  @include button;
}
